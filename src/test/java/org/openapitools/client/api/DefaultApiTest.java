/*
 * Alexa For Business
 * Alexa for Business has been retired and is no longer supported.
 *
 * The version of the OpenAPI document: 2017-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApproveSkillRequest;
import org.openapitools.client.model.AssociateContactWithAddressBookRequest;
import org.openapitools.client.model.AssociateDeviceWithNetworkProfileRequest;
import org.openapitools.client.model.AssociateDeviceWithRoomRequest;
import org.openapitools.client.model.AssociateSkillGroupWithRoomRequest;
import org.openapitools.client.model.AssociateSkillWithSkillGroupRequest;
import org.openapitools.client.model.AssociateSkillWithUsersRequest;
import org.openapitools.client.model.CreateAddressBookRequest;
import org.openapitools.client.model.CreateAddressBookResponse;
import org.openapitools.client.model.CreateBusinessReportScheduleRequest;
import org.openapitools.client.model.CreateBusinessReportScheduleResponse;
import org.openapitools.client.model.CreateConferenceProviderRequest;
import org.openapitools.client.model.CreateConferenceProviderResponse;
import org.openapitools.client.model.CreateContactRequest;
import org.openapitools.client.model.CreateContactResponse;
import org.openapitools.client.model.CreateGatewayGroupRequest;
import org.openapitools.client.model.CreateGatewayGroupResponse;
import org.openapitools.client.model.CreateNetworkProfileRequest;
import org.openapitools.client.model.CreateNetworkProfileResponse;
import org.openapitools.client.model.CreateProfileRequest;
import org.openapitools.client.model.CreateProfileResponse;
import org.openapitools.client.model.CreateRoomRequest;
import org.openapitools.client.model.CreateRoomResponse;
import org.openapitools.client.model.CreateSkillGroupRequest;
import org.openapitools.client.model.CreateSkillGroupResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.DeleteAddressBookRequest;
import org.openapitools.client.model.DeleteBusinessReportScheduleRequest;
import org.openapitools.client.model.DeleteConferenceProviderRequest;
import org.openapitools.client.model.DeleteContactRequest;
import org.openapitools.client.model.DeleteDeviceRequest;
import org.openapitools.client.model.DeleteDeviceUsageDataRequest;
import org.openapitools.client.model.DeleteGatewayGroupRequest;
import org.openapitools.client.model.DeleteNetworkProfileRequest;
import org.openapitools.client.model.DeleteProfileRequest;
import org.openapitools.client.model.DeleteRoomRequest;
import org.openapitools.client.model.DeleteRoomSkillParameterRequest;
import org.openapitools.client.model.DeleteSkillAuthorizationRequest;
import org.openapitools.client.model.DeleteSkillGroupRequest;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DisassociateContactFromAddressBookRequest;
import org.openapitools.client.model.DisassociateDeviceFromRoomRequest;
import org.openapitools.client.model.DisassociateSkillFromSkillGroupRequest;
import org.openapitools.client.model.DisassociateSkillFromUsersRequest;
import org.openapitools.client.model.DisassociateSkillGroupFromRoomRequest;
import org.openapitools.client.model.ForgetSmartHomeAppliancesRequest;
import org.openapitools.client.model.GetAddressBookRequest;
import org.openapitools.client.model.GetAddressBookResponse;
import org.openapitools.client.model.GetConferencePreferenceResponse;
import org.openapitools.client.model.GetConferenceProviderRequest;
import org.openapitools.client.model.GetConferenceProviderResponse;
import org.openapitools.client.model.GetContactRequest;
import org.openapitools.client.model.GetContactResponse;
import org.openapitools.client.model.GetDeviceRequest;
import org.openapitools.client.model.GetDeviceResponse;
import org.openapitools.client.model.GetGatewayGroupRequest;
import org.openapitools.client.model.GetGatewayGroupResponse;
import org.openapitools.client.model.GetGatewayRequest;
import org.openapitools.client.model.GetGatewayResponse;
import org.openapitools.client.model.GetInvitationConfigurationResponse;
import org.openapitools.client.model.GetNetworkProfileRequest;
import org.openapitools.client.model.GetNetworkProfileResponse;
import org.openapitools.client.model.GetProfileRequest;
import org.openapitools.client.model.GetProfileResponse;
import org.openapitools.client.model.GetRoomRequest;
import org.openapitools.client.model.GetRoomResponse;
import org.openapitools.client.model.GetRoomSkillParameterRequest;
import org.openapitools.client.model.GetRoomSkillParameterResponse;
import org.openapitools.client.model.GetSkillGroupRequest;
import org.openapitools.client.model.GetSkillGroupResponse;
import org.openapitools.client.model.ListBusinessReportSchedulesRequest;
import org.openapitools.client.model.ListBusinessReportSchedulesResponse;
import org.openapitools.client.model.ListConferenceProvidersRequest;
import org.openapitools.client.model.ListConferenceProvidersResponse;
import org.openapitools.client.model.ListDeviceEventsRequest;
import org.openapitools.client.model.ListDeviceEventsResponse;
import org.openapitools.client.model.ListGatewayGroupsRequest;
import org.openapitools.client.model.ListGatewayGroupsResponse;
import org.openapitools.client.model.ListGatewaysRequest;
import org.openapitools.client.model.ListGatewaysResponse;
import org.openapitools.client.model.ListSkillsRequest;
import org.openapitools.client.model.ListSkillsResponse;
import org.openapitools.client.model.ListSkillsStoreCategoriesRequest;
import org.openapitools.client.model.ListSkillsStoreCategoriesResponse;
import org.openapitools.client.model.ListSkillsStoreSkillsByCategoryRequest;
import org.openapitools.client.model.ListSkillsStoreSkillsByCategoryResponse;
import org.openapitools.client.model.ListSmartHomeAppliancesRequest;
import org.openapitools.client.model.ListSmartHomeAppliancesResponse;
import org.openapitools.client.model.ListTagsRequest;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.PutConferencePreferenceRequest;
import org.openapitools.client.model.PutInvitationConfigurationRequest;
import org.openapitools.client.model.PutRoomSkillParameterRequest;
import org.openapitools.client.model.PutSkillAuthorizationRequest;
import org.openapitools.client.model.RegisterAVSDeviceRequest;
import org.openapitools.client.model.RegisterAVSDeviceResponse;
import org.openapitools.client.model.RejectSkillRequest;
import org.openapitools.client.model.ResolveRoomRequest;
import org.openapitools.client.model.ResolveRoomResponse;
import org.openapitools.client.model.RevokeInvitationRequest;
import org.openapitools.client.model.SearchAddressBooksRequest;
import org.openapitools.client.model.SearchAddressBooksResponse;
import org.openapitools.client.model.SearchContactsRequest;
import org.openapitools.client.model.SearchContactsResponse;
import org.openapitools.client.model.SearchDevicesRequest;
import org.openapitools.client.model.SearchDevicesResponse;
import org.openapitools.client.model.SearchNetworkProfilesRequest;
import org.openapitools.client.model.SearchNetworkProfilesResponse;
import org.openapitools.client.model.SearchProfilesRequest;
import org.openapitools.client.model.SearchProfilesResponse;
import org.openapitools.client.model.SearchRoomsRequest;
import org.openapitools.client.model.SearchRoomsResponse;
import org.openapitools.client.model.SearchSkillGroupsRequest;
import org.openapitools.client.model.SearchSkillGroupsResponse;
import org.openapitools.client.model.SearchUsersRequest;
import org.openapitools.client.model.SearchUsersResponse;
import org.openapitools.client.model.SendAnnouncementRequest;
import org.openapitools.client.model.SendAnnouncementResponse;
import org.openapitools.client.model.SendInvitationRequest;
import org.openapitools.client.model.StartDeviceSyncRequest;
import org.openapitools.client.model.StartSmartHomeApplianceDiscoveryRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAddressBookRequest;
import org.openapitools.client.model.UpdateBusinessReportScheduleRequest;
import org.openapitools.client.model.UpdateConferenceProviderRequest;
import org.openapitools.client.model.UpdateContactRequest;
import org.openapitools.client.model.UpdateDeviceRequest;
import org.openapitools.client.model.UpdateGatewayGroupRequest;
import org.openapitools.client.model.UpdateGatewayRequest;
import org.openapitools.client.model.UpdateNetworkProfileRequest;
import org.openapitools.client.model.UpdateProfileRequest;
import org.openapitools.client.model.UpdateRoomRequest;
import org.openapitools.client.model.UpdateSkillGroupRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates a skill with the organization under the customer&#39;s AWS account. If a skill is private, the user implicitly accepts access to this skill during enablement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveSkillTest() throws ApiException {
        String xAmzTarget = null;
        ApproveSkillRequest approveSkillRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.approveSkill(xAmzTarget, approveSkillRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a contact with a given address book.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateContactWithAddressBookTest() throws ApiException {
        String xAmzTarget = null;
        AssociateContactWithAddressBookRequest associateContactWithAddressBookRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateContactWithAddressBook(xAmzTarget, associateContactWithAddressBookRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a device with the specified network profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateDeviceWithNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        AssociateDeviceWithNetworkProfileRequest associateDeviceWithNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateDeviceWithNetworkProfile(xAmzTarget, associateDeviceWithNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a device with a given room. This applies all the settings from the room profile to the device, and all the skills in any skill groups added to that room. This operation requires the device to be online, or else a manual sync is required. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateDeviceWithRoomTest() throws ApiException {
        String xAmzTarget = null;
        AssociateDeviceWithRoomRequest associateDeviceWithRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateDeviceWithRoom(xAmzTarget, associateDeviceWithRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a skill group with a given room. This enables all skills in the associated skill group on all devices in the room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSkillGroupWithRoomTest() throws ApiException {
        String xAmzTarget = null;
        AssociateSkillGroupWithRoomRequest associateSkillGroupWithRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateSkillGroupWithRoom(xAmzTarget, associateSkillGroupWithRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a skill with a skill group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSkillWithSkillGroupTest() throws ApiException {
        String xAmzTarget = null;
        AssociateSkillWithSkillGroupRequest associateSkillWithSkillGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateSkillWithSkillGroup(xAmzTarget, associateSkillWithSkillGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Makes a private skill available for enrolled users to enable on their devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSkillWithUsersTest() throws ApiException {
        String xAmzTarget = null;
        AssociateSkillWithUsersRequest associateSkillWithUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateSkillWithUsers(xAmzTarget, associateSkillWithUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an address book with the specified details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAddressBookTest() throws ApiException {
        String xAmzTarget = null;
        CreateAddressBookRequest createAddressBookRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAddressBookResponse response = api.createAddressBook(xAmzTarget, createAddressBookRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a recurring schedule for usage reports to deliver to the specified S3 location with a specified daily or weekly interval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBusinessReportScheduleTest() throws ApiException {
        String xAmzTarget = null;
        CreateBusinessReportScheduleRequest createBusinessReportScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBusinessReportScheduleResponse response = api.createBusinessReportSchedule(xAmzTarget, createBusinessReportScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a new conference provider under the user&#39;s AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConferenceProviderTest() throws ApiException {
        String xAmzTarget = null;
        CreateConferenceProviderRequest createConferenceProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConferenceProviderResponse response = api.createConferenceProvider(xAmzTarget, createConferenceProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a contact with the specified details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        String xAmzTarget = null;
        CreateContactRequest createContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContactResponse response = api.createContact(xAmzTarget, createContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a gateway group with the specified details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGatewayGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateGatewayGroupRequest createGatewayGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGatewayGroupResponse response = api.createGatewayGroup(xAmzTarget, createGatewayGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a network profile with the specified details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        CreateNetworkProfileRequest createNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNetworkProfileResponse response = api.createNetworkProfile(xAmzTarget, createNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new room profile with the specified details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfileTest() throws ApiException {
        String xAmzTarget = null;
        CreateProfileRequest createProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProfileResponse response = api.createProfile(xAmzTarget, createProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a room with the specified details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRoomTest() throws ApiException {
        String xAmzTarget = null;
        CreateRoomRequest createRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRoomResponse response = api.createRoom(xAmzTarget, createRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a skill group with a specified name and description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSkillGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateSkillGroupRequest createSkillGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSkillGroupResponse response = api.createSkillGroup(xAmzTarget, createSkillGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserResponse response = api.createUser(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an address book by the address book ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAddressBookTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAddressBookRequest deleteAddressBookRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAddressBook(xAmzTarget, deleteAddressBookRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the recurring report delivery schedule with the specified schedule ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBusinessReportScheduleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBusinessReportScheduleRequest deleteBusinessReportScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteBusinessReportSchedule(xAmzTarget, deleteBusinessReportScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a conference provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConferenceProviderTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConferenceProviderRequest deleteConferenceProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConferenceProvider(xAmzTarget, deleteConferenceProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a contact by the contact ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContactRequest deleteContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContact(xAmzTarget, deleteContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a device from Alexa For Business.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDeviceRequest deleteDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDevice(xAmzTarget, deleteDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * When this action is called for a specified shared device, it allows authorized users to delete the device&#39;s entire previous history of voice input data and associated response data. This action can be called once every 24 hours for a specific shared device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceUsageDataTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDeviceUsageDataRequest deleteDeviceUsageDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDeviceUsageData(xAmzTarget, deleteDeviceUsageDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a gateway group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGatewayGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteGatewayGroupRequest deleteGatewayGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteGatewayGroup(xAmzTarget, deleteGatewayGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a network profile by the network profile ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        DeleteNetworkProfileRequest deleteNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteNetworkProfile(xAmzTarget, deleteNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a room profile by the profile ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProfileRequest deleteProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProfile(xAmzTarget, deleteProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a room by the room ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoomTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRoomRequest deleteRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRoom(xAmzTarget, deleteRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes room skill parameter details by room, skill, and parameter key ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoomSkillParameterTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRoomSkillParameterRequest deleteRoomSkillParameterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRoomSkillParameter(xAmzTarget, deleteRoomSkillParameterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Unlinks a third-party account from a skill.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSkillAuthorizationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSkillAuthorizationRequest deleteSkillAuthorizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSkillAuthorization(xAmzTarget, deleteSkillAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a skill group by skill group ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSkillGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSkillGroupRequest deleteSkillGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSkillGroup(xAmzTarget, deleteSkillGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified user by user ARN and enrollment ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserRequest deleteUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUser(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a contact from a given address book.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateContactFromAddressBookTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateContactFromAddressBookRequest disassociateContactFromAddressBookRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateContactFromAddressBook(xAmzTarget, disassociateContactFromAddressBookRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a device from its current room. The device continues to be connected to the Wi-Fi network and is still registered to the account. The device settings and skills are removed from the room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateDeviceFromRoomTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateDeviceFromRoomRequest disassociateDeviceFromRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateDeviceFromRoom(xAmzTarget, disassociateDeviceFromRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a skill from a skill group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateSkillFromSkillGroupTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateSkillFromSkillGroupRequest disassociateSkillFromSkillGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateSkillFromSkillGroup(xAmzTarget, disassociateSkillFromSkillGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Makes a private skill unavailable for enrolled users and prevents them from enabling it on their devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateSkillFromUsersTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateSkillFromUsersRequest disassociateSkillFromUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateSkillFromUsers(xAmzTarget, disassociateSkillFromUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a skill group from a specified room. This disables all skills in the skill group on all devices in the room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateSkillGroupFromRoomTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateSkillGroupFromRoomRequest disassociateSkillGroupFromRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateSkillGroupFromRoom(xAmzTarget, disassociateSkillGroupFromRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Forgets smart home appliances associated to a room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgetSmartHomeAppliancesTest() throws ApiException {
        String xAmzTarget = null;
        ForgetSmartHomeAppliancesRequest forgetSmartHomeAppliancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.forgetSmartHomeAppliances(xAmzTarget, forgetSmartHomeAppliancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets address the book details by the address book ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAddressBookTest() throws ApiException {
        String xAmzTarget = null;
        GetAddressBookRequest getAddressBookRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAddressBookResponse response = api.getAddressBook(xAmzTarget, getAddressBookRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the existing conference preferences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConferencePreferenceTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConferencePreferenceResponse response = api.getConferencePreference(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a specific conference provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConferenceProviderTest() throws ApiException {
        String xAmzTarget = null;
        GetConferenceProviderRequest getConferenceProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConferenceProviderResponse response = api.getConferenceProvider(xAmzTarget, getConferenceProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the contact details by the contact ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        String xAmzTarget = null;
        GetContactRequest getContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactResponse response = api.getContact(xAmzTarget, getContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details of a device by device ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        String xAmzTarget = null;
        GetDeviceRequest getDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceResponse response = api.getDevice(xAmzTarget, getDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayTest() throws ApiException {
        String xAmzTarget = null;
        GetGatewayRequest getGatewayRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGatewayResponse response = api.getGateway(xAmzTarget, getGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a gateway group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGatewayGroupTest() throws ApiException {
        String xAmzTarget = null;
        GetGatewayGroupRequest getGatewayGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGatewayGroupResponse response = api.getGatewayGroup(xAmzTarget, getGatewayGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the configured values for the user enrollment invitation email template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvitationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInvitationConfigurationResponse response = api.getInvitationConfiguration(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the network profile details by the network profile ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        GetNetworkProfileRequest getNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNetworkProfileResponse response = api.getNetworkProfile(xAmzTarget, getNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details of a room profile by profile ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        String xAmzTarget = null;
        GetProfileRequest getProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetProfileResponse response = api.getProfile(xAmzTarget, getProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets room details by room ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoomTest() throws ApiException {
        String xAmzTarget = null;
        GetRoomRequest getRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRoomResponse response = api.getRoom(xAmzTarget, getRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets room skill parameter details by room, skill, and parameter key ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoomSkillParameterTest() throws ApiException {
        String xAmzTarget = null;
        GetRoomSkillParameterRequest getRoomSkillParameterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRoomSkillParameterResponse response = api.getRoomSkillParameter(xAmzTarget, getRoomSkillParameterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets skill group details by skill group ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSkillGroupTest() throws ApiException {
        String xAmzTarget = null;
        GetSkillGroupRequest getSkillGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSkillGroupResponse response = api.getSkillGroup(xAmzTarget, getSkillGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the details of the schedules that a user configured. A download URL of the report associated with each schedule is returned every time this action is called. A new download URL is returned each time, and is valid for 24 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBusinessReportSchedulesTest() throws ApiException {
        String xAmzTarget = null;
        ListBusinessReportSchedulesRequest listBusinessReportSchedulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBusinessReportSchedulesResponse response = api.listBusinessReportSchedules(xAmzTarget, listBusinessReportSchedulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists conference providers under a specific AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConferenceProvidersTest() throws ApiException {
        String xAmzTarget = null;
        ListConferenceProvidersRequest listConferenceProvidersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListConferenceProvidersResponse response = api.listConferenceProviders(xAmzTarget, listConferenceProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the device event history, including device connection status, for up to 30 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeviceEventsTest() throws ApiException {
        String xAmzTarget = null;
        ListDeviceEventsRequest listDeviceEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDeviceEventsResponse response = api.listDeviceEvents(xAmzTarget, listDeviceEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of gateway group summaries. Use GetGatewayGroup to retrieve details of a specific gateway group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGatewayGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListGatewayGroupsRequest listGatewayGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListGatewayGroupsResponse response = api.listGatewayGroups(xAmzTarget, listGatewayGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of gateway summaries. Use GetGateway to retrieve details of a specific gateway. An optional gateway group ARN can be provided to only retrieve gateway summaries of gateways that are associated with that gateway group ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGatewaysTest() throws ApiException {
        String xAmzTarget = null;
        ListGatewaysRequest listGatewaysRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListGatewaysResponse response = api.listGateways(xAmzTarget, listGatewaysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all enabled skills in a specific skill group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSkillsTest() throws ApiException {
        String xAmzTarget = null;
        ListSkillsRequest listSkillsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSkillsResponse response = api.listSkills(xAmzTarget, listSkillsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all categories in the Alexa skill store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSkillsStoreCategoriesTest() throws ApiException {
        String xAmzTarget = null;
        ListSkillsStoreCategoriesRequest listSkillsStoreCategoriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSkillsStoreCategoriesResponse response = api.listSkillsStoreCategories(xAmzTarget, listSkillsStoreCategoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all skills in the Alexa skill store by category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSkillsStoreSkillsByCategoryTest() throws ApiException {
        String xAmzTarget = null;
        ListSkillsStoreSkillsByCategoryRequest listSkillsStoreSkillsByCategoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSkillsStoreSkillsByCategoryResponse response = api.listSkillsStoreSkillsByCategory(xAmzTarget, listSkillsStoreSkillsByCategoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all of the smart home appliances associated with a room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSmartHomeAppliancesTest() throws ApiException {
        String xAmzTarget = null;
        ListSmartHomeAppliancesRequest listSmartHomeAppliancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSmartHomeAppliancesResponse response = api.listSmartHomeAppliances(xAmzTarget, listSmartHomeAppliancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all tags for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsRequest listTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsResponse response = api.listTags(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Sets the conference preferences on a specific conference provider at the account level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConferencePreferenceTest() throws ApiException {
        String xAmzTarget = null;
        PutConferencePreferenceRequest putConferencePreferenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putConferencePreference(xAmzTarget, putConferencePreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Configures the email template for the user enrollment invitation with the specified attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putInvitationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutInvitationConfigurationRequest putInvitationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putInvitationConfiguration(xAmzTarget, putInvitationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates room skill parameter details by room, skill, and parameter key ID. Not all skills have a room skill parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRoomSkillParameterTest() throws ApiException {
        String xAmzTarget = null;
        PutRoomSkillParameterRequest putRoomSkillParameterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putRoomSkillParameter(xAmzTarget, putRoomSkillParameterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Links a user&#39;s account to a third-party skill provider. If this API operation is called by an assumed IAM role, the skill being linked must be a private skill. Also, the skill must be owned by the AWS account that assumed the IAM role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSkillAuthorizationTest() throws ApiException {
        String xAmzTarget = null;
        PutSkillAuthorizationRequest putSkillAuthorizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putSkillAuthorization(xAmzTarget, putSkillAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers an Alexa-enabled device built by an Original Equipment Manufacturer (OEM) using Alexa Voice Service (AVS).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerAVSDeviceTest() throws ApiException {
        String xAmzTarget = null;
        RegisterAVSDeviceRequest registerAVSDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterAVSDeviceResponse response = api.registerAVSDevice(xAmzTarget, registerAVSDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a skill from the organization under a user&#39;s AWS account. If the skill is a private skill, it moves to an AcceptStatus of PENDING. Any private or public skill that is rejected can be added later by calling the ApproveSkill API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectSkillTest() throws ApiException {
        String xAmzTarget = null;
        RejectSkillRequest rejectSkillRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.rejectSkill(xAmzTarget, rejectSkillRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Determines the details for the room from which a skill request was invoked. This operation is used by skill developers.&lt;/p&gt; &lt;p&gt;To query ResolveRoom from an Alexa skill, the skill ID needs to be authorized. When the skill is using an AWS Lambda function, the skill is automatically authorized when you publish your skill as a private skill to your AWS account. Skills that are hosted using a custom web service must be manually authorized. To get your skill authorized, contact AWS Support with your AWS account ID that queries the ResolveRoom API and skill ID. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveRoomTest() throws ApiException {
        String xAmzTarget = null;
        ResolveRoomRequest resolveRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResolveRoomResponse response = api.resolveRoom(xAmzTarget, resolveRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Revokes an invitation and invalidates the enrollment URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeInvitationTest() throws ApiException {
        String xAmzTarget = null;
        RevokeInvitationRequest revokeInvitationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.revokeInvitation(xAmzTarget, revokeInvitationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Searches address books and lists the ones that meet a set of filter and sort criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAddressBooksTest() throws ApiException {
        String xAmzTarget = null;
        SearchAddressBooksRequest searchAddressBooksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchAddressBooksResponse response = api.searchAddressBooks(xAmzTarget, searchAddressBooksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches contacts and lists the ones that meet a set of filter and sort criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchContactsTest() throws ApiException {
        String xAmzTarget = null;
        SearchContactsRequest searchContactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchContactsResponse response = api.searchContacts(xAmzTarget, searchContactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches devices and lists the ones that meet a set of filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchDevicesTest() throws ApiException {
        String xAmzTarget = null;
        SearchDevicesRequest searchDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchDevicesResponse response = api.searchDevices(xAmzTarget, searchDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches network profiles and lists the ones that meet a set of filter and sort criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchNetworkProfilesTest() throws ApiException {
        String xAmzTarget = null;
        SearchNetworkProfilesRequest searchNetworkProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchNetworkProfilesResponse response = api.searchNetworkProfiles(xAmzTarget, searchNetworkProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches room profiles and lists the ones that meet a set of filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchProfilesTest() throws ApiException {
        String xAmzTarget = null;
        SearchProfilesRequest searchProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchProfilesResponse response = api.searchProfiles(xAmzTarget, searchProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches rooms and lists the ones that meet a set of filter and sort criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRoomsTest() throws ApiException {
        String xAmzTarget = null;
        SearchRoomsRequest searchRoomsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchRoomsResponse response = api.searchRooms(xAmzTarget, searchRoomsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches skill groups and lists the ones that meet a set of filter and sort criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSkillGroupsTest() throws ApiException {
        String xAmzTarget = null;
        SearchSkillGroupsRequest searchSkillGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchSkillGroupsResponse response = api.searchSkillGroups(xAmzTarget, searchSkillGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Searches users and lists the ones that meet a set of filter and sort criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUsersTest() throws ApiException {
        String xAmzTarget = null;
        SearchUsersRequest searchUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchUsersResponse response = api.searchUsers(xAmzTarget, searchUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Triggers an asynchronous flow to send text, SSML, or audio announcements to rooms that are identified by a search or filter. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendAnnouncementTest() throws ApiException {
        String xAmzTarget = null;
        SendAnnouncementRequest sendAnnouncementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendAnnouncementResponse response = api.sendAnnouncement(xAmzTarget, sendAnnouncementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends an enrollment invitation email with a URL to a user. The URL is valid for 30 days or until you call this operation again, whichever comes first. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendInvitationTest() throws ApiException {
        String xAmzTarget = null;
        SendInvitationRequest sendInvitationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.sendInvitation(xAmzTarget, sendInvitationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resets a device and its account to the known default settings. This clears all information and settings set by previous users in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Bluetooth - This unpairs all bluetooth devices paired with your echo device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Volume - This resets the echo device&#39;s volume to the default value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Notifications - This clears all notifications from your echo device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lists - This clears all to-do items from your echo device.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Settings - This internally syncs the room&#39;s profile (if the device is assigned to a room), contacts, address books, delegation access for account linking, and communications (if enabled on the room profile).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDeviceSyncTest() throws ApiException {
        String xAmzTarget = null;
        StartDeviceSyncRequest startDeviceSyncRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startDeviceSync(xAmzTarget, startDeviceSyncRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Initiates the discovery of any smart home appliances associated with the room.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSmartHomeApplianceDiscoveryTest() throws ApiException {
        String xAmzTarget = null;
        StartSmartHomeApplianceDiscoveryRequest startSmartHomeApplianceDiscoveryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startSmartHomeApplianceDiscovery(xAmzTarget, startSmartHomeApplianceDiscoveryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds metadata tags to a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes metadata tags from a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates address book details by the address book ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAddressBookTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAddressBookRequest updateAddressBookRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateAddressBook(xAmzTarget, updateAddressBookRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of the report delivery schedule with the specified schedule ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBusinessReportScheduleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateBusinessReportScheduleRequest updateBusinessReportScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateBusinessReportSchedule(xAmzTarget, updateBusinessReportScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing conference provider&#39;s settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConferenceProviderTest() throws ApiException {
        String xAmzTarget = null;
        UpdateConferenceProviderRequest updateConferenceProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateConferenceProvider(xAmzTarget, updateConferenceProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the contact details by the contact ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String xAmzTarget = null;
        UpdateContactRequest updateContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContact(xAmzTarget, updateContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the device name by device ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDeviceRequest updateDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDevice(xAmzTarget, updateDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the details of a gateway. If any optional field is not provided, the existing corresponding value is left unmodified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGatewayTest() throws ApiException {
        String xAmzTarget = null;
        UpdateGatewayRequest updateGatewayRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateGateway(xAmzTarget, updateGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the details of a gateway group. If any optional field is not provided, the existing corresponding value is left unmodified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGatewayGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateGatewayGroupRequest updateGatewayGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateGatewayGroup(xAmzTarget, updateGatewayGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a network profile by the network profile ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        UpdateNetworkProfileRequest updateNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateNetworkProfile(xAmzTarget, updateNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing room profile by room profile ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProfileRequest updateProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateProfile(xAmzTarget, updateProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates room details by room ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoomTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRoomRequest updateRoomRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateRoom(xAmzTarget, updateRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates skill group details by skill group ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSkillGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSkillGroupRequest updateSkillGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateSkillGroup(xAmzTarget, updateSkillGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
