/*
 * Alexa For Business
 * Alexa for Business has been retired and is no longer supported.
 *
 * The version of the OpenAPI document: 2017-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DistanceUnit;
import org.openapitools.client.model.TemperatureUnit;
import org.openapitools.client.model.WakeWord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data of a room profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:07:53.324908+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ProfileData {
  public static final String SERIALIZED_NAME_PROFILE_ARN = "ProfileArn";
  @SerializedName(SERIALIZED_NAME_PROFILE_ARN)
  @javax.annotation.Nullable
  private String profileArn;

  public static final String SERIALIZED_NAME_PROFILE_NAME = "ProfileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  @javax.annotation.Nullable
  private String profileName;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "IsDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  @javax.annotation.Nullable
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_TIMEZONE = "Timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public static final String SERIALIZED_NAME_DISTANCE_UNIT = "DistanceUnit";
  @SerializedName(SERIALIZED_NAME_DISTANCE_UNIT)
  @javax.annotation.Nullable
  private DistanceUnit distanceUnit;

  public static final String SERIALIZED_NAME_TEMPERATURE_UNIT = "TemperatureUnit";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE_UNIT)
  @javax.annotation.Nullable
  private TemperatureUnit temperatureUnit;

  public static final String SERIALIZED_NAME_WAKE_WORD = "WakeWord";
  @SerializedName(SERIALIZED_NAME_WAKE_WORD)
  @javax.annotation.Nullable
  private WakeWord wakeWord;

  public static final String SERIALIZED_NAME_LOCALE = "Locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  @javax.annotation.Nullable
  private String locale;

  public ProfileData() {
  }

  public ProfileData profileArn(@javax.annotation.Nullable String profileArn) {
    this.profileArn = profileArn;
    return this;
  }

  /**
   * Get profileArn
   * @return profileArn
   */
  @javax.annotation.Nullable
  public String getProfileArn() {
    return profileArn;
  }

  public void setProfileArn(@javax.annotation.Nullable String profileArn) {
    this.profileArn = profileArn;
  }


  public ProfileData profileName(@javax.annotation.Nullable String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * Get profileName
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(@javax.annotation.Nullable String profileName) {
    this.profileName = profileName;
  }


  public ProfileData isDefault(@javax.annotation.Nullable Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(@javax.annotation.Nullable Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public ProfileData address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public ProfileData timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  public ProfileData distanceUnit(@javax.annotation.Nullable DistanceUnit distanceUnit) {
    this.distanceUnit = distanceUnit;
    return this;
  }

  /**
   * Get distanceUnit
   * @return distanceUnit
   */
  @javax.annotation.Nullable
  public DistanceUnit getDistanceUnit() {
    return distanceUnit;
  }

  public void setDistanceUnit(@javax.annotation.Nullable DistanceUnit distanceUnit) {
    this.distanceUnit = distanceUnit;
  }


  public ProfileData temperatureUnit(@javax.annotation.Nullable TemperatureUnit temperatureUnit) {
    this.temperatureUnit = temperatureUnit;
    return this;
  }

  /**
   * Get temperatureUnit
   * @return temperatureUnit
   */
  @javax.annotation.Nullable
  public TemperatureUnit getTemperatureUnit() {
    return temperatureUnit;
  }

  public void setTemperatureUnit(@javax.annotation.Nullable TemperatureUnit temperatureUnit) {
    this.temperatureUnit = temperatureUnit;
  }


  public ProfileData wakeWord(@javax.annotation.Nullable WakeWord wakeWord) {
    this.wakeWord = wakeWord;
    return this;
  }

  /**
   * Get wakeWord
   * @return wakeWord
   */
  @javax.annotation.Nullable
  public WakeWord getWakeWord() {
    return wakeWord;
  }

  public void setWakeWord(@javax.annotation.Nullable WakeWord wakeWord) {
    this.wakeWord = wakeWord;
  }


  public ProfileData locale(@javax.annotation.Nullable String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(@javax.annotation.Nullable String locale) {
    this.locale = locale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileData profileData = (ProfileData) o;
    return Objects.equals(this.profileArn, profileData.profileArn) &&
        Objects.equals(this.profileName, profileData.profileName) &&
        Objects.equals(this.isDefault, profileData.isDefault) &&
        Objects.equals(this.address, profileData.address) &&
        Objects.equals(this.timezone, profileData.timezone) &&
        Objects.equals(this.distanceUnit, profileData.distanceUnit) &&
        Objects.equals(this.temperatureUnit, profileData.temperatureUnit) &&
        Objects.equals(this.wakeWord, profileData.wakeWord) &&
        Objects.equals(this.locale, profileData.locale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileArn, profileName, isDefault, address, timezone, distanceUnit, temperatureUnit, wakeWord, locale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileData {\n");
    sb.append("    profileArn: ").append(toIndentedString(profileArn)).append("\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    distanceUnit: ").append(toIndentedString(distanceUnit)).append("\n");
    sb.append("    temperatureUnit: ").append(toIndentedString(temperatureUnit)).append("\n");
    sb.append("    wakeWord: ").append(toIndentedString(wakeWord)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProfileArn");
    openapiFields.add("ProfileName");
    openapiFields.add("IsDefault");
    openapiFields.add("Address");
    openapiFields.add("Timezone");
    openapiFields.add("DistanceUnit");
    openapiFields.add("TemperatureUnit");
    openapiFields.add("WakeWord");
    openapiFields.add("Locale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfileData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileData is not found in the empty JSON string", ProfileData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ProfileArn`
      if (jsonObj.get("ProfileArn") != null && !jsonObj.get("ProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProfileArn"));
      }
      // validate the optional field `ProfileName`
      if (jsonObj.get("ProfileName") != null && !jsonObj.get("ProfileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProfileName"));
      }
      // validate the optional field `IsDefault`
      if (jsonObj.get("IsDefault") != null && !jsonObj.get("IsDefault").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsDefault"));
      }
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Address"));
      }
      // validate the optional field `Timezone`
      if (jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Timezone"));
      }
      // validate the optional field `DistanceUnit`
      if (jsonObj.get("DistanceUnit") != null && !jsonObj.get("DistanceUnit").isJsonNull()) {
        DistanceUnit.validateJsonElement(jsonObj.get("DistanceUnit"));
      }
      // validate the optional field `TemperatureUnit`
      if (jsonObj.get("TemperatureUnit") != null && !jsonObj.get("TemperatureUnit").isJsonNull()) {
        TemperatureUnit.validateJsonElement(jsonObj.get("TemperatureUnit"));
      }
      // validate the optional field `WakeWord`
      if (jsonObj.get("WakeWord") != null && !jsonObj.get("WakeWord").isJsonNull()) {
        WakeWord.validateJsonElement(jsonObj.get("WakeWord"));
      }
      // validate the optional field `Locale`
      if (jsonObj.get("Locale") != null && !jsonObj.get("Locale").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Locale"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileData.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileData>() {
           @Override
           public void write(JsonWriter out, ProfileData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfileData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfileData
   * @throws IOException if the JSON string is invalid with respect to ProfileData
   */
  public static ProfileData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileData.class);
  }

  /**
   * Convert an instance of ProfileData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

