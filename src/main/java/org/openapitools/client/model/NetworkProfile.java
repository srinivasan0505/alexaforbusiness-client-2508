/*
 * Alexa For Business
 * Alexa for Business has been retired and is no longer supported.
 *
 * The version of the OpenAPI document: 2017-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NetworkEapMethod;
import org.openapitools.client.model.NetworkSecurityType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The network profile associated with a device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:07:53.324908+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class NetworkProfile {
  public static final String SERIALIZED_NAME_NETWORK_PROFILE_ARN = "NetworkProfileArn";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE_ARN)
  @javax.annotation.Nullable
  private String networkProfileArn;

  public static final String SERIALIZED_NAME_NETWORK_PROFILE_NAME = "NetworkProfileName";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE_NAME)
  @javax.annotation.Nullable
  private String networkProfileName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_SSID = "Ssid";
  @SerializedName(SERIALIZED_NAME_SSID)
  @javax.annotation.Nullable
  private String ssid;

  public static final String SERIALIZED_NAME_SECURITY_TYPE = "SecurityType";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE)
  @javax.annotation.Nullable
  private NetworkSecurityType securityType;

  public static final String SERIALIZED_NAME_EAP_METHOD = "EapMethod";
  @SerializedName(SERIALIZED_NAME_EAP_METHOD)
  @javax.annotation.Nullable
  private NetworkEapMethod eapMethod;

  public static final String SERIALIZED_NAME_CURRENT_PASSWORD = "CurrentPassword";
  @SerializedName(SERIALIZED_NAME_CURRENT_PASSWORD)
  @javax.annotation.Nullable
  private String currentPassword;

  public static final String SERIALIZED_NAME_NEXT_PASSWORD = "NextPassword";
  @SerializedName(SERIALIZED_NAME_NEXT_PASSWORD)
  @javax.annotation.Nullable
  private String nextPassword;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN = "CertificateAuthorityArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN)
  @javax.annotation.Nullable
  private String certificateAuthorityArn;

  public static final String SERIALIZED_NAME_TRUST_ANCHORS = "TrustAnchors";
  @SerializedName(SERIALIZED_NAME_TRUST_ANCHORS)
  @javax.annotation.Nullable
  private List trustAnchors;

  public NetworkProfile() {
  }

  public NetworkProfile networkProfileArn(@javax.annotation.Nullable String networkProfileArn) {
    this.networkProfileArn = networkProfileArn;
    return this;
  }

  /**
   * Get networkProfileArn
   * @return networkProfileArn
   */
  @javax.annotation.Nullable
  public String getNetworkProfileArn() {
    return networkProfileArn;
  }

  public void setNetworkProfileArn(@javax.annotation.Nullable String networkProfileArn) {
    this.networkProfileArn = networkProfileArn;
  }


  public NetworkProfile networkProfileName(@javax.annotation.Nullable String networkProfileName) {
    this.networkProfileName = networkProfileName;
    return this;
  }

  /**
   * Get networkProfileName
   * @return networkProfileName
   */
  @javax.annotation.Nullable
  public String getNetworkProfileName() {
    return networkProfileName;
  }

  public void setNetworkProfileName(@javax.annotation.Nullable String networkProfileName) {
    this.networkProfileName = networkProfileName;
  }


  public NetworkProfile description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public NetworkProfile ssid(@javax.annotation.Nullable String ssid) {
    this.ssid = ssid;
    return this;
  }

  /**
   * Get ssid
   * @return ssid
   */
  @javax.annotation.Nullable
  public String getSsid() {
    return ssid;
  }

  public void setSsid(@javax.annotation.Nullable String ssid) {
    this.ssid = ssid;
  }


  public NetworkProfile securityType(@javax.annotation.Nullable NetworkSecurityType securityType) {
    this.securityType = securityType;
    return this;
  }

  /**
   * Get securityType
   * @return securityType
   */
  @javax.annotation.Nullable
  public NetworkSecurityType getSecurityType() {
    return securityType;
  }

  public void setSecurityType(@javax.annotation.Nullable NetworkSecurityType securityType) {
    this.securityType = securityType;
  }


  public NetworkProfile eapMethod(@javax.annotation.Nullable NetworkEapMethod eapMethod) {
    this.eapMethod = eapMethod;
    return this;
  }

  /**
   * Get eapMethod
   * @return eapMethod
   */
  @javax.annotation.Nullable
  public NetworkEapMethod getEapMethod() {
    return eapMethod;
  }

  public void setEapMethod(@javax.annotation.Nullable NetworkEapMethod eapMethod) {
    this.eapMethod = eapMethod;
  }


  public NetworkProfile currentPassword(@javax.annotation.Nullable String currentPassword) {
    this.currentPassword = currentPassword;
    return this;
  }

  /**
   * Get currentPassword
   * @return currentPassword
   */
  @javax.annotation.Nullable
  public String getCurrentPassword() {
    return currentPassword;
  }

  public void setCurrentPassword(@javax.annotation.Nullable String currentPassword) {
    this.currentPassword = currentPassword;
  }


  public NetworkProfile nextPassword(@javax.annotation.Nullable String nextPassword) {
    this.nextPassword = nextPassword;
    return this;
  }

  /**
   * Get nextPassword
   * @return nextPassword
   */
  @javax.annotation.Nullable
  public String getNextPassword() {
    return nextPassword;
  }

  public void setNextPassword(@javax.annotation.Nullable String nextPassword) {
    this.nextPassword = nextPassword;
  }


  public NetworkProfile certificateAuthorityArn(@javax.annotation.Nullable String certificateAuthorityArn) {
    this.certificateAuthorityArn = certificateAuthorityArn;
    return this;
  }

  /**
   * Get certificateAuthorityArn
   * @return certificateAuthorityArn
   */
  @javax.annotation.Nullable
  public String getCertificateAuthorityArn() {
    return certificateAuthorityArn;
  }

  public void setCertificateAuthorityArn(@javax.annotation.Nullable String certificateAuthorityArn) {
    this.certificateAuthorityArn = certificateAuthorityArn;
  }


  public NetworkProfile trustAnchors(@javax.annotation.Nullable List trustAnchors) {
    this.trustAnchors = trustAnchors;
    return this;
  }

  /**
   * Get trustAnchors
   * @return trustAnchors
   */
  @javax.annotation.Nullable
  public List getTrustAnchors() {
    return trustAnchors;
  }

  public void setTrustAnchors(@javax.annotation.Nullable List trustAnchors) {
    this.trustAnchors = trustAnchors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkProfile networkProfile = (NetworkProfile) o;
    return Objects.equals(this.networkProfileArn, networkProfile.networkProfileArn) &&
        Objects.equals(this.networkProfileName, networkProfile.networkProfileName) &&
        Objects.equals(this.description, networkProfile.description) &&
        Objects.equals(this.ssid, networkProfile.ssid) &&
        Objects.equals(this.securityType, networkProfile.securityType) &&
        Objects.equals(this.eapMethod, networkProfile.eapMethod) &&
        Objects.equals(this.currentPassword, networkProfile.currentPassword) &&
        Objects.equals(this.nextPassword, networkProfile.nextPassword) &&
        Objects.equals(this.certificateAuthorityArn, networkProfile.certificateAuthorityArn) &&
        Objects.equals(this.trustAnchors, networkProfile.trustAnchors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkProfileArn, networkProfileName, description, ssid, securityType, eapMethod, currentPassword, nextPassword, certificateAuthorityArn, trustAnchors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkProfile {\n");
    sb.append("    networkProfileArn: ").append(toIndentedString(networkProfileArn)).append("\n");
    sb.append("    networkProfileName: ").append(toIndentedString(networkProfileName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ssid: ").append(toIndentedString(ssid)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("    eapMethod: ").append(toIndentedString(eapMethod)).append("\n");
    sb.append("    currentPassword: ").append(toIndentedString(currentPassword)).append("\n");
    sb.append("    nextPassword: ").append(toIndentedString(nextPassword)).append("\n");
    sb.append("    certificateAuthorityArn: ").append(toIndentedString(certificateAuthorityArn)).append("\n");
    sb.append("    trustAnchors: ").append(toIndentedString(trustAnchors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NetworkProfileArn");
    openapiFields.add("NetworkProfileName");
    openapiFields.add("Description");
    openapiFields.add("Ssid");
    openapiFields.add("SecurityType");
    openapiFields.add("EapMethod");
    openapiFields.add("CurrentPassword");
    openapiFields.add("NextPassword");
    openapiFields.add("CertificateAuthorityArn");
    openapiFields.add("TrustAnchors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkProfile is not found in the empty JSON string", NetworkProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NetworkProfileArn`
      if (jsonObj.get("NetworkProfileArn") != null && !jsonObj.get("NetworkProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkProfileArn"));
      }
      // validate the optional field `NetworkProfileName`
      if (jsonObj.get("NetworkProfileName") != null && !jsonObj.get("NetworkProfileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkProfileName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Ssid`
      if (jsonObj.get("Ssid") != null && !jsonObj.get("Ssid").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Ssid"));
      }
      // validate the optional field `SecurityType`
      if (jsonObj.get("SecurityType") != null && !jsonObj.get("SecurityType").isJsonNull()) {
        NetworkSecurityType.validateJsonElement(jsonObj.get("SecurityType"));
      }
      // validate the optional field `EapMethod`
      if (jsonObj.get("EapMethod") != null && !jsonObj.get("EapMethod").isJsonNull()) {
        NetworkEapMethod.validateJsonElement(jsonObj.get("EapMethod"));
      }
      // validate the optional field `CurrentPassword`
      if (jsonObj.get("CurrentPassword") != null && !jsonObj.get("CurrentPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentPassword"));
      }
      // validate the optional field `NextPassword`
      if (jsonObj.get("NextPassword") != null && !jsonObj.get("NextPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextPassword"));
      }
      // validate the optional field `CertificateAuthorityArn`
      if (jsonObj.get("CertificateAuthorityArn") != null && !jsonObj.get("CertificateAuthorityArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateAuthorityArn"));
      }
      // validate the optional field `TrustAnchors`
      if (jsonObj.get("TrustAnchors") != null && !jsonObj.get("TrustAnchors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TrustAnchors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkProfile>() {
           @Override
           public void write(JsonWriter out, NetworkProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkProfile
   * @throws IOException if the JSON string is invalid with respect to NetworkProfile
   */
  public static NetworkProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkProfile.class);
  }

  /**
   * Convert an instance of NetworkProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

