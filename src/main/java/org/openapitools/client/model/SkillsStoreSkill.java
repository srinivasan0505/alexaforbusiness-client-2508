/*
 * Alexa For Business
 * Alexa for Business has been retired and is no longer supported.
 *
 * The version of the OpenAPI document: 2017-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SkillsStoreSkillSkillDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The detailed information about an Alexa skill.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:07:53.324908+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class SkillsStoreSkill {
  public static final String SERIALIZED_NAME_SKILL_ID = "SkillId";
  @SerializedName(SERIALIZED_NAME_SKILL_ID)
  @javax.annotation.Nullable
  private String skillId;

  public static final String SERIALIZED_NAME_SKILL_NAME = "SkillName";
  @SerializedName(SERIALIZED_NAME_SKILL_NAME)
  @javax.annotation.Nullable
  private String skillName;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "ShortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  @javax.annotation.Nullable
  private String shortDescription;

  public static final String SERIALIZED_NAME_ICON_URL = "IconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  @javax.annotation.Nullable
  private String iconUrl;

  public static final String SERIALIZED_NAME_SAMPLE_UTTERANCES = "SampleUtterances";
  @SerializedName(SERIALIZED_NAME_SAMPLE_UTTERANCES)
  @javax.annotation.Nullable
  private List sampleUtterances;

  public static final String SERIALIZED_NAME_SKILL_DETAILS = "SkillDetails";
  @SerializedName(SERIALIZED_NAME_SKILL_DETAILS)
  @javax.annotation.Nullable
  private SkillsStoreSkillSkillDetails skillDetails;

  public static final String SERIALIZED_NAME_SUPPORTS_LINKING = "SupportsLinking";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_LINKING)
  @javax.annotation.Nullable
  private Boolean supportsLinking;

  public SkillsStoreSkill() {
  }

  public SkillsStoreSkill skillId(@javax.annotation.Nullable String skillId) {
    this.skillId = skillId;
    return this;
  }

  /**
   * Get skillId
   * @return skillId
   */
  @javax.annotation.Nullable
  public String getSkillId() {
    return skillId;
  }

  public void setSkillId(@javax.annotation.Nullable String skillId) {
    this.skillId = skillId;
  }


  public SkillsStoreSkill skillName(@javax.annotation.Nullable String skillName) {
    this.skillName = skillName;
    return this;
  }

  /**
   * Get skillName
   * @return skillName
   */
  @javax.annotation.Nullable
  public String getSkillName() {
    return skillName;
  }

  public void setSkillName(@javax.annotation.Nullable String skillName) {
    this.skillName = skillName;
  }


  public SkillsStoreSkill shortDescription(@javax.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Get shortDescription
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(@javax.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public SkillsStoreSkill iconUrl(@javax.annotation.Nullable String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * Get iconUrl
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(@javax.annotation.Nullable String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public SkillsStoreSkill sampleUtterances(@javax.annotation.Nullable List sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
    return this;
  }

  /**
   * Get sampleUtterances
   * @return sampleUtterances
   */
  @javax.annotation.Nullable
  public List getSampleUtterances() {
    return sampleUtterances;
  }

  public void setSampleUtterances(@javax.annotation.Nullable List sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
  }


  public SkillsStoreSkill skillDetails(@javax.annotation.Nullable SkillsStoreSkillSkillDetails skillDetails) {
    this.skillDetails = skillDetails;
    return this;
  }

  /**
   * Get skillDetails
   * @return skillDetails
   */
  @javax.annotation.Nullable
  public SkillsStoreSkillSkillDetails getSkillDetails() {
    return skillDetails;
  }

  public void setSkillDetails(@javax.annotation.Nullable SkillsStoreSkillSkillDetails skillDetails) {
    this.skillDetails = skillDetails;
  }


  public SkillsStoreSkill supportsLinking(@javax.annotation.Nullable Boolean supportsLinking) {
    this.supportsLinking = supportsLinking;
    return this;
  }

  /**
   * Get supportsLinking
   * @return supportsLinking
   */
  @javax.annotation.Nullable
  public Boolean getSupportsLinking() {
    return supportsLinking;
  }

  public void setSupportsLinking(@javax.annotation.Nullable Boolean supportsLinking) {
    this.supportsLinking = supportsLinking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkillsStoreSkill skillsStoreSkill = (SkillsStoreSkill) o;
    return Objects.equals(this.skillId, skillsStoreSkill.skillId) &&
        Objects.equals(this.skillName, skillsStoreSkill.skillName) &&
        Objects.equals(this.shortDescription, skillsStoreSkill.shortDescription) &&
        Objects.equals(this.iconUrl, skillsStoreSkill.iconUrl) &&
        Objects.equals(this.sampleUtterances, skillsStoreSkill.sampleUtterances) &&
        Objects.equals(this.skillDetails, skillsStoreSkill.skillDetails) &&
        Objects.equals(this.supportsLinking, skillsStoreSkill.supportsLinking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(skillId, skillName, shortDescription, iconUrl, sampleUtterances, skillDetails, supportsLinking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkillsStoreSkill {\n");
    sb.append("    skillId: ").append(toIndentedString(skillId)).append("\n");
    sb.append("    skillName: ").append(toIndentedString(skillName)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    sampleUtterances: ").append(toIndentedString(sampleUtterances)).append("\n");
    sb.append("    skillDetails: ").append(toIndentedString(skillDetails)).append("\n");
    sb.append("    supportsLinking: ").append(toIndentedString(supportsLinking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SkillId");
    openapiFields.add("SkillName");
    openapiFields.add("ShortDescription");
    openapiFields.add("IconUrl");
    openapiFields.add("SampleUtterances");
    openapiFields.add("SkillDetails");
    openapiFields.add("SupportsLinking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkillsStoreSkill
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkillsStoreSkill.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkillsStoreSkill is not found in the empty JSON string", SkillsStoreSkill.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkillsStoreSkill.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkillsStoreSkill` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SkillId`
      if (jsonObj.get("SkillId") != null && !jsonObj.get("SkillId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SkillId"));
      }
      // validate the optional field `SkillName`
      if (jsonObj.get("SkillName") != null && !jsonObj.get("SkillName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SkillName"));
      }
      // validate the optional field `ShortDescription`
      if (jsonObj.get("ShortDescription") != null && !jsonObj.get("ShortDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ShortDescription"));
      }
      // validate the optional field `IconUrl`
      if (jsonObj.get("IconUrl") != null && !jsonObj.get("IconUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IconUrl"));
      }
      // validate the optional field `SampleUtterances`
      if (jsonObj.get("SampleUtterances") != null && !jsonObj.get("SampleUtterances").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SampleUtterances"));
      }
      // validate the optional field `SkillDetails`
      if (jsonObj.get("SkillDetails") != null && !jsonObj.get("SkillDetails").isJsonNull()) {
        SkillsStoreSkillSkillDetails.validateJsonElement(jsonObj.get("SkillDetails"));
      }
      // validate the optional field `SupportsLinking`
      if (jsonObj.get("SupportsLinking") != null && !jsonObj.get("SupportsLinking").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SupportsLinking"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkillsStoreSkill.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkillsStoreSkill' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkillsStoreSkill> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkillsStoreSkill.class));

       return (TypeAdapter<T>) new TypeAdapter<SkillsStoreSkill>() {
           @Override
           public void write(JsonWriter out, SkillsStoreSkill value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkillsStoreSkill read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkillsStoreSkill given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkillsStoreSkill
   * @throws IOException if the JSON string is invalid with respect to SkillsStoreSkill
   */
  public static SkillsStoreSkill fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkillsStoreSkill.class);
  }

  /**
   * Convert an instance of SkillsStoreSkill to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

