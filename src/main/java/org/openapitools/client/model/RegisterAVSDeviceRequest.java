/*
 * Alexa For Business
 * Alexa for Business has been retired and is no longer supported.
 *
 * The version of the OpenAPI document: 2017-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterAVSDeviceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:07:53.324908+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class RegisterAVSDeviceRequest {
  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nonnull
  private String clientId;

  public static final String SERIALIZED_NAME_USER_CODE = "UserCode";
  @SerializedName(SERIALIZED_NAME_USER_CODE)
  @javax.annotation.Nonnull
  private String userCode;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "ProductId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nonnull
  private String productId;

  public static final String SERIALIZED_NAME_DEVICE_SERIAL_NUMBER = "DeviceSerialNumber";
  @SerializedName(SERIALIZED_NAME_DEVICE_SERIAL_NUMBER)
  @javax.annotation.Nullable
  private String deviceSerialNumber;

  public static final String SERIALIZED_NAME_AMAZON_ID = "AmazonId";
  @SerializedName(SERIALIZED_NAME_AMAZON_ID)
  @javax.annotation.Nonnull
  private String amazonId;

  public static final String SERIALIZED_NAME_ROOM_ARN = "RoomArn";
  @SerializedName(SERIALIZED_NAME_ROOM_ARN)
  @javax.annotation.Nullable
  private String roomArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List tags;

  public RegisterAVSDeviceRequest() {
  }

  public RegisterAVSDeviceRequest clientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
  }


  public RegisterAVSDeviceRequest userCode(@javax.annotation.Nonnull String userCode) {
    this.userCode = userCode;
    return this;
  }

  /**
   * Get userCode
   * @return userCode
   */
  @javax.annotation.Nonnull
  public String getUserCode() {
    return userCode;
  }

  public void setUserCode(@javax.annotation.Nonnull String userCode) {
    this.userCode = userCode;
  }


  public RegisterAVSDeviceRequest productId(@javax.annotation.Nonnull String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nonnull String productId) {
    this.productId = productId;
  }


  public RegisterAVSDeviceRequest deviceSerialNumber(@javax.annotation.Nullable String deviceSerialNumber) {
    this.deviceSerialNumber = deviceSerialNumber;
    return this;
  }

  /**
   * Get deviceSerialNumber
   * @return deviceSerialNumber
   */
  @javax.annotation.Nullable
  public String getDeviceSerialNumber() {
    return deviceSerialNumber;
  }

  public void setDeviceSerialNumber(@javax.annotation.Nullable String deviceSerialNumber) {
    this.deviceSerialNumber = deviceSerialNumber;
  }


  public RegisterAVSDeviceRequest amazonId(@javax.annotation.Nonnull String amazonId) {
    this.amazonId = amazonId;
    return this;
  }

  /**
   * Get amazonId
   * @return amazonId
   */
  @javax.annotation.Nonnull
  public String getAmazonId() {
    return amazonId;
  }

  public void setAmazonId(@javax.annotation.Nonnull String amazonId) {
    this.amazonId = amazonId;
  }


  public RegisterAVSDeviceRequest roomArn(@javax.annotation.Nullable String roomArn) {
    this.roomArn = roomArn;
    return this;
  }

  /**
   * Get roomArn
   * @return roomArn
   */
  @javax.annotation.Nullable
  public String getRoomArn() {
    return roomArn;
  }

  public void setRoomArn(@javax.annotation.Nullable String roomArn) {
    this.roomArn = roomArn;
  }


  public RegisterAVSDeviceRequest tags(@javax.annotation.Nullable List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterAVSDeviceRequest registerAVSDeviceRequest = (RegisterAVSDeviceRequest) o;
    return Objects.equals(this.clientId, registerAVSDeviceRequest.clientId) &&
        Objects.equals(this.userCode, registerAVSDeviceRequest.userCode) &&
        Objects.equals(this.productId, registerAVSDeviceRequest.productId) &&
        Objects.equals(this.deviceSerialNumber, registerAVSDeviceRequest.deviceSerialNumber) &&
        Objects.equals(this.amazonId, registerAVSDeviceRequest.amazonId) &&
        Objects.equals(this.roomArn, registerAVSDeviceRequest.roomArn) &&
        Objects.equals(this.tags, registerAVSDeviceRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, userCode, productId, deviceSerialNumber, amazonId, roomArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterAVSDeviceRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    userCode: ").append(toIndentedString(userCode)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    deviceSerialNumber: ").append(toIndentedString(deviceSerialNumber)).append("\n");
    sb.append("    amazonId: ").append(toIndentedString(amazonId)).append("\n");
    sb.append("    roomArn: ").append(toIndentedString(roomArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientId");
    openapiFields.add("UserCode");
    openapiFields.add("ProductId");
    openapiFields.add("DeviceSerialNumber");
    openapiFields.add("AmazonId");
    openapiFields.add("RoomArn");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClientId");
    openapiRequiredFields.add("UserCode");
    openapiRequiredFields.add("ProductId");
    openapiRequiredFields.add("AmazonId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterAVSDeviceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterAVSDeviceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterAVSDeviceRequest is not found in the empty JSON string", RegisterAVSDeviceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterAVSDeviceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterAVSDeviceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterAVSDeviceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ClientId`
      String.validateJsonElement(jsonObj.get("ClientId"));
      // validate the required field `UserCode`
      String.validateJsonElement(jsonObj.get("UserCode"));
      // validate the required field `ProductId`
      String.validateJsonElement(jsonObj.get("ProductId"));
      // validate the optional field `DeviceSerialNumber`
      if (jsonObj.get("DeviceSerialNumber") != null && !jsonObj.get("DeviceSerialNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceSerialNumber"));
      }
      // validate the required field `AmazonId`
      String.validateJsonElement(jsonObj.get("AmazonId"));
      // validate the optional field `RoomArn`
      if (jsonObj.get("RoomArn") != null && !jsonObj.get("RoomArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoomArn"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterAVSDeviceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterAVSDeviceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterAVSDeviceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterAVSDeviceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterAVSDeviceRequest>() {
           @Override
           public void write(JsonWriter out, RegisterAVSDeviceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterAVSDeviceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterAVSDeviceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterAVSDeviceRequest
   * @throws IOException if the JSON string is invalid with respect to RegisterAVSDeviceRequest
   */
  public static RegisterAVSDeviceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterAVSDeviceRequest.class);
  }

  /**
   * Convert an instance of RegisterAVSDeviceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

