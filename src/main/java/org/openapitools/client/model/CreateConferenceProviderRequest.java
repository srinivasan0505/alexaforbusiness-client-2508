/*
 * Alexa For Business
 * Alexa for Business has been retired and is no longer supported.
 *
 * The version of the OpenAPI document: 2017-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConferenceProviderType;
import org.openapitools.client.model.CreateConferenceProviderRequestIPDialIn;
import org.openapitools.client.model.CreateConferenceProviderRequestMeetingSetting;
import org.openapitools.client.model.CreateConferenceProviderRequestPSTNDialIn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConferenceProviderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:07:53.324908+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateConferenceProviderRequest {
  public static final String SERIALIZED_NAME_CONFERENCE_PROVIDER_NAME = "ConferenceProviderName";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_PROVIDER_NAME)
  @javax.annotation.Nonnull
  private String conferenceProviderName;

  public static final String SERIALIZED_NAME_CONFERENCE_PROVIDER_TYPE = "ConferenceProviderType";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_PROVIDER_TYPE)
  @javax.annotation.Nonnull
  private ConferenceProviderType conferenceProviderType;

  public static final String SERIALIZED_NAME_IP_DIAL_IN = "IPDialIn";
  @SerializedName(SERIALIZED_NAME_IP_DIAL_IN)
  @javax.annotation.Nullable
  private CreateConferenceProviderRequestIPDialIn ipDialIn;

  public static final String SERIALIZED_NAME_PS_T_N_DIAL_IN = "PSTNDialIn";
  @SerializedName(SERIALIZED_NAME_PS_T_N_DIAL_IN)
  @javax.annotation.Nullable
  private CreateConferenceProviderRequestPSTNDialIn psTNDialIn;

  public static final String SERIALIZED_NAME_MEETING_SETTING = "MeetingSetting";
  @SerializedName(SERIALIZED_NAME_MEETING_SETTING)
  @javax.annotation.Nonnull
  private CreateConferenceProviderRequestMeetingSetting meetingSetting;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  @javax.annotation.Nullable
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List tags;

  public CreateConferenceProviderRequest() {
  }

  public CreateConferenceProviderRequest conferenceProviderName(@javax.annotation.Nonnull String conferenceProviderName) {
    this.conferenceProviderName = conferenceProviderName;
    return this;
  }

  /**
   * Get conferenceProviderName
   * @return conferenceProviderName
   */
  @javax.annotation.Nonnull
  public String getConferenceProviderName() {
    return conferenceProviderName;
  }

  public void setConferenceProviderName(@javax.annotation.Nonnull String conferenceProviderName) {
    this.conferenceProviderName = conferenceProviderName;
  }


  public CreateConferenceProviderRequest conferenceProviderType(@javax.annotation.Nonnull ConferenceProviderType conferenceProviderType) {
    this.conferenceProviderType = conferenceProviderType;
    return this;
  }

  /**
   * Get conferenceProviderType
   * @return conferenceProviderType
   */
  @javax.annotation.Nonnull
  public ConferenceProviderType getConferenceProviderType() {
    return conferenceProviderType;
  }

  public void setConferenceProviderType(@javax.annotation.Nonnull ConferenceProviderType conferenceProviderType) {
    this.conferenceProviderType = conferenceProviderType;
  }


  public CreateConferenceProviderRequest ipDialIn(@javax.annotation.Nullable CreateConferenceProviderRequestIPDialIn ipDialIn) {
    this.ipDialIn = ipDialIn;
    return this;
  }

  /**
   * Get ipDialIn
   * @return ipDialIn
   */
  @javax.annotation.Nullable
  public CreateConferenceProviderRequestIPDialIn getIpDialIn() {
    return ipDialIn;
  }

  public void setIpDialIn(@javax.annotation.Nullable CreateConferenceProviderRequestIPDialIn ipDialIn) {
    this.ipDialIn = ipDialIn;
  }


  public CreateConferenceProviderRequest psTNDialIn(@javax.annotation.Nullable CreateConferenceProviderRequestPSTNDialIn psTNDialIn) {
    this.psTNDialIn = psTNDialIn;
    return this;
  }

  /**
   * Get psTNDialIn
   * @return psTNDialIn
   */
  @javax.annotation.Nullable
  public CreateConferenceProviderRequestPSTNDialIn getPsTNDialIn() {
    return psTNDialIn;
  }

  public void setPsTNDialIn(@javax.annotation.Nullable CreateConferenceProviderRequestPSTNDialIn psTNDialIn) {
    this.psTNDialIn = psTNDialIn;
  }


  public CreateConferenceProviderRequest meetingSetting(@javax.annotation.Nonnull CreateConferenceProviderRequestMeetingSetting meetingSetting) {
    this.meetingSetting = meetingSetting;
    return this;
  }

  /**
   * Get meetingSetting
   * @return meetingSetting
   */
  @javax.annotation.Nonnull
  public CreateConferenceProviderRequestMeetingSetting getMeetingSetting() {
    return meetingSetting;
  }

  public void setMeetingSetting(@javax.annotation.Nonnull CreateConferenceProviderRequestMeetingSetting meetingSetting) {
    this.meetingSetting = meetingSetting;
  }


  public CreateConferenceProviderRequest clientRequestToken(@javax.annotation.Nullable String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(@javax.annotation.Nullable String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateConferenceProviderRequest tags(@javax.annotation.Nullable List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConferenceProviderRequest createConferenceProviderRequest = (CreateConferenceProviderRequest) o;
    return Objects.equals(this.conferenceProviderName, createConferenceProviderRequest.conferenceProviderName) &&
        Objects.equals(this.conferenceProviderType, createConferenceProviderRequest.conferenceProviderType) &&
        Objects.equals(this.ipDialIn, createConferenceProviderRequest.ipDialIn) &&
        Objects.equals(this.psTNDialIn, createConferenceProviderRequest.psTNDialIn) &&
        Objects.equals(this.meetingSetting, createConferenceProviderRequest.meetingSetting) &&
        Objects.equals(this.clientRequestToken, createConferenceProviderRequest.clientRequestToken) &&
        Objects.equals(this.tags, createConferenceProviderRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conferenceProviderName, conferenceProviderType, ipDialIn, psTNDialIn, meetingSetting, clientRequestToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConferenceProviderRequest {\n");
    sb.append("    conferenceProviderName: ").append(toIndentedString(conferenceProviderName)).append("\n");
    sb.append("    conferenceProviderType: ").append(toIndentedString(conferenceProviderType)).append("\n");
    sb.append("    ipDialIn: ").append(toIndentedString(ipDialIn)).append("\n");
    sb.append("    psTNDialIn: ").append(toIndentedString(psTNDialIn)).append("\n");
    sb.append("    meetingSetting: ").append(toIndentedString(meetingSetting)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConferenceProviderName");
    openapiFields.add("ConferenceProviderType");
    openapiFields.add("IPDialIn");
    openapiFields.add("PSTNDialIn");
    openapiFields.add("MeetingSetting");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ConferenceProviderName");
    openapiRequiredFields.add("ConferenceProviderType");
    openapiRequiredFields.add("MeetingSetting");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConferenceProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConferenceProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConferenceProviderRequest is not found in the empty JSON string", CreateConferenceProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConferenceProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConferenceProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConferenceProviderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ConferenceProviderName`
      String.validateJsonElement(jsonObj.get("ConferenceProviderName"));
      // validate the required field `ConferenceProviderType`
      ConferenceProviderType.validateJsonElement(jsonObj.get("ConferenceProviderType"));
      // validate the optional field `IPDialIn`
      if (jsonObj.get("IPDialIn") != null && !jsonObj.get("IPDialIn").isJsonNull()) {
        CreateConferenceProviderRequestIPDialIn.validateJsonElement(jsonObj.get("IPDialIn"));
      }
      // validate the optional field `PSTNDialIn`
      if (jsonObj.get("PSTNDialIn") != null && !jsonObj.get("PSTNDialIn").isJsonNull()) {
        CreateConferenceProviderRequestPSTNDialIn.validateJsonElement(jsonObj.get("PSTNDialIn"));
      }
      // validate the required field `MeetingSetting`
      CreateConferenceProviderRequestMeetingSetting.validateJsonElement(jsonObj.get("MeetingSetting"));
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConferenceProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConferenceProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConferenceProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConferenceProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConferenceProviderRequest>() {
           @Override
           public void write(JsonWriter out, CreateConferenceProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConferenceProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConferenceProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConferenceProviderRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConferenceProviderRequest
   */
  public static CreateConferenceProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConferenceProviderRequest.class);
  }

  /**
   * Convert an instance of CreateConferenceProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

